{"version":3,"sources":["types/CellStatus.ts","components/Cell/index.tsx","components/Board/index.tsx","components/Header/index.tsx","state/GameStateManagement.ts","components/Controls/index.tsx","Game.tsx","index.tsx"],"names":["CellState","Cell","props","className","status","neighboringMines","onClick","index","onContextMenu","e","onRightClick","preventDefault","Board","gridStyle","gridTemplateColumns","repeat","Math","sqrt","size","style","cells","map","cell","data","Header","isWin","isGameover","score","highScore","winStreak","mines","generateGameState","numMines","generateMines","win","gameover","mineCount","RangeError","xSize","Array","from","length","_","i","x","y","floor","mine","Unknown","currentCount","isMine","random","updateCellState","cellData","newData","Object","assign","countNeighboringMines","Danger","Clear","isWinCondition","gameState","filter","c","Flagged","analyzedCell","isNeighbor","self","other","includes","revealNeighboringClearCells","revealClearCells","updatedCells","clearedCells","newClearedCells","normalizedIndex","Controls","onClickNext","onClickRestart","initalGameState","Game","useState","setGameState","initializeGame","useCallback","useEffect","prevState","newState","forEach","Exploded","revealCell","flagCell","newGame","pow","round","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAAYA,E,0EAAAA,O,qBAAAA,I,iBAAAA,I,mBAAAA,I,uBAAAA,I,sBAAAA,M,gBCWCC,EAAwB,SAAAC,GACnC,OACE,qBAAK,cAAY,OACbC,UAAS,gBAAWH,EAAUE,EAAME,SAA3B,OAAqCF,EAAMG,kBAAoB,IACxEC,QAAS,kBAAMJ,EAAMI,QAAQJ,EAAMK,QACnCC,cAAe,SAACC,GAAOP,EAAMQ,aAAaR,EAAMK,OAAQE,EAAEE,kBAH9D,SAIM,4BAAIT,EAAMG,sBCNPO,EAAQ,SAACV,GAEpB,IAAMW,EAAY,CAChBC,oBAAqB,QAAQC,OAAOC,KAAKC,KAAKf,EAAMgB,QAGtD,OACA,qBAAKf,UAAU,QAAQgB,MAAON,EAAW,cAAY,QAArD,SAEIX,EAAMkB,MAAMC,KACV,SAAAC,GAAI,OAAI,cAAC,EAAD,CAENf,MAAOe,EAAKf,MACZD,QAASJ,EAAMI,QACfI,aAAcR,EAAMQ,aACpBN,OAAQkB,EAAKC,KAAKnB,OAClBC,iBAAkBiB,EAAKC,KAAKlB,kBALvBiB,EAAKf,aCbb,SAASiB,EAAOtB,GACnB,OACA,yBAAQC,UAAU,aAAa,cAAY,SAA3C,UACKD,EAAMuB,QAAUvB,EAAMwB,WAAa,cAAgB,GACnDxB,EAAMwB,WAAa,eAAiB,GAFzC,UAGYxB,EAAMyB,MACd,uBAJJ,eAKiBzB,EAAM0B,UACnB,uBANJ,eAOiB1B,EAAM2B,UACnB,uBARJ,uBASyB3B,EAAM4B,SChB5B,IAAMC,EAAoB,SAC7Bb,EACAc,EACAL,EACAC,EACAC,GAYA,MAV2B,CACvBX,KAAMA,EACNE,MAAOa,EAAcf,EAAMc,GAC3BF,MAAOE,EACPL,MAAOA,GAAS,EAChBC,UAAWA,GAAa,EACxBM,KAAK,EACLL,UAAWA,GAAa,EACxBM,UAAU,IAKLF,EAAgB,SAACf,EAAckB,GACxC,GAAIA,EAAYlB,EACZ,MAAMmB,WAAW,4CAcrB,IAZA,IAAMC,EAAQtB,KAAKC,KAAKC,GAClBE,EAAoBmB,MAAMC,KAAK,CAACC,OAAQvB,IAAO,SAACwB,EAAGC,GAAJ,MAAW,CAC5DpC,MAAOoC,EACPC,EAAGD,EAAIL,EACPO,EAAG7B,KAAK8B,MAAMH,EAAEL,GAChBf,KAAM,CACFwB,MAAM,EACN3C,OAAQJ,EAAUgD,aAGtBC,EAAe,EAEbA,EAAeb,GACjB,IAAI,IAAIO,EAAE,EAAGA,EAAIzB,KAET+B,GAAgBb,GAFDO,IAKnB,IAAIvB,EAAMuB,GAAGpB,KAAKwB,KAAK,CACnB,IAAMG,EAASlC,KAAKmC,SAAW,GAC/B/B,EAAMuB,GAAGpB,KAAKwB,KAAOG,EACjBA,GAAQD,IAIxB,OAAO7B,GAiCLgC,EAAkB,SAACC,EAAoBjC,EAAmBb,GAC5D,IAAM+C,EAAUC,OAAOC,OAAO,GAAIH,GAC5BvB,EAAQ2B,EAAsBrC,EAAOb,GAG3C,OAFA+C,EAAQ/B,KAAKnB,OAAS0B,EAAQ,EAAI9B,EAAU0D,OAAS1D,EAAU2D,MAC/DL,EAAQ/B,KAAKlB,iBAAmByB,EACzBwB,GAGEM,EAAiB,SAACC,GAC3B,OAAQA,EAAU1B,UACd0B,EAAUzC,MAAM0C,QAAO,SAAAC,GAAC,OAAIA,EAAExC,KAAKnB,SAAWJ,EAAUgD,WAASP,OAC/DoB,EAAUzC,MAAM0C,QAAO,SAAAC,GAAC,OAAIA,EAAExC,KAAKnB,SAAWJ,EAAUgE,WAASvB,SAC/DoB,EAAU/B,OAiBT2B,EAAwB,SAACrC,EAAmBb,GACrD,IAAM0D,EAAe7C,EAAMb,GAE3B,OAAOa,EACN0C,QAAO,SAAAC,GAAC,OAAIG,EAAWD,EAAcF,MACrCD,QAAO,SAAAC,GAAC,OAAIA,EAAExC,KAAKwB,QAAMN,QAGxByB,EAAa,SAACC,EAAgBC,GAChC,IAAMxB,EAAIuB,EAAKvB,EACTC,EAAIsB,EAAKtB,EACf,MAAQ,CAACD,EAAE,EAAGA,EAAGA,EAAE,GAAGyB,SAASD,EAAMxB,IAAM,CAACC,EAAE,EAAGA,EAAE,GAAGwB,SAASD,EAAMvB,IAC7D,CAACD,EAAE,EAAGA,EAAE,GAAGyB,SAASD,EAAMxB,IAAMC,IAAMuB,EAAMvB,GAG3CyB,EAA8B,SAAClD,EAAmBb,GAC3D,IAAM0D,EAAe7C,EAAMb,GAE3B,OAAOa,EACNC,KAAI,SAAA0C,GACD,OAAGG,EAAWD,EAAcF,KAAOA,EAAExC,KAAKwB,KAC/BK,EAAgBW,EAAG3C,EAAO2C,EAAExD,OAEhCwD,MAIFQ,EAAmB,SAACnD,EAAmBb,GAIhD,IAHA,IAAIiE,EAAepD,EACfqD,EAAerD,EAAM0C,QAAO,SAAAC,GAAC,OAAIA,EAAExC,KAAKnB,SAAWJ,EAAU2D,SAAOlB,OACpEiC,EAAkB,EAChBD,IAAiBC,GAAgB,CACnCD,EAAeC,EACf,IAAK,IAAI/B,EAAI,EAAGA,EAAIvB,EAAMqB,OAAQE,IAAI,CAClC,IAAMgC,EAAkBhC,EAAIvB,EAAMqB,OAC/BrB,EAAMuD,GAAiBpD,KAAKnB,SAAWJ,EAAU2D,QAChDa,EAAeF,EAA4BlD,EAAOuD,IAG1DD,EAAkBtD,EAAM0C,QAAO,SAAAC,GAAC,OAAIA,EAAExC,KAAKnB,SAAWJ,EAAU2D,SAAOlB,OAE3E,OAAO+B,GCnJEI,G,MAA4B,SAAC1E,GACtC,OACA,gCACKA,EAAM2D,UAAU3B,KAAO,mBACvBhC,EAAM2D,UAAU1B,UAAY,2BAC7B,qBAAKhC,UAAU,mBAAf,SACKD,EAAM2D,UAAU3B,KAAO,wBAAQ/B,UAAU,cAAcG,QAASJ,EAAM2E,YAA/C,yBAE5B,qBAAK1E,UAAU,mBAAf,SACKD,EAAM2D,UAAU1B,UAAY,wBAAQhC,UAAU,iBAAiBG,QAASJ,EAAM4E,eAAlD,4BCPnCC,EAA6B,CAC/B7D,KAAM,EACNE,MAAO,GACPU,MAAO,EACPH,MAAO,EACPC,UAAW,EACXM,KAAK,EACLL,UAAW,EACXM,UAAU,GA6DC6C,MA1Df,WAEI,MAAkCC,mBAAoBF,GAAtD,mBAAOlB,EAAP,KAAkBqB,EAAlB,KAEMC,EAAiBC,uBAAY,WAC/BF,EAAanD,EAnBA,EACC,MAmBhB,IAkCF,OAFAsD,qBAAU,kBAAMF,MAAkB,CAACA,IAGnC,sBAAKhF,UAAU,MAAf,UACE,cAACqB,EAAD,CACEC,MAAOoC,EAAU3B,IACjBR,WAAYmC,EAAU1B,SACtBR,MAAOkC,EAAUlC,MACjBE,UAAWgC,EAAUhC,UACrBD,UAAWiC,EAAUjC,UACrBE,MAAO+B,EAAU/B,QAEnB,qBAAK3B,UAAU,kBAAf,SACE,cAAC,EAAD,CAAOe,KAAM2C,EAAU3C,KAAME,MAAOyC,EAAUzC,MAAOd,QA3C9B,SAACC,GACxB2E,EFyBkB,SAACI,EAAsB/E,GAC7C,GAAG+E,EAAUpD,KAAOoD,EAAUnD,SAC1B,OAAOmD,EAGX,IAAIC,EAAWhC,OAAOC,OAAO,GAAI8B,GAsBjC,OArBAC,EAASnE,MAAMoE,SAAQ,SAAAzB,GAChBA,EAAExD,QAAUA,IACPwD,EAAExC,KAAKwB,MACPgB,EAAExC,KAAKnB,OAASJ,EAAUyF,SAC1BF,EAASpD,UAAW,IAEpB4B,EAAIX,EAAgBW,EAAGuB,EAAUlE,MAAOb,GACxCgF,EAAS5D,OAAS,IACfoC,EAAExC,KAAKnB,SAAWJ,EAAU2D,QAC3B4B,EAASnE,MAAQmD,EAAiBe,EAAUlE,MAAOb,SAK/DqD,EAAe2B,KACfA,EAASrD,KAAM,EACfqD,EAAS1D,YACL0D,EAAS5D,MAAQ4D,EAAS3D,YAC1B2D,EAAS3D,UAAY2D,EAAS5D,QAG/B4D,EEpDUG,CAAW7B,EAAWtD,KA0C+CG,aAvCtD,SAACH,GAC/B2E,EFkEkB,SAACI,EAAsB/E,GAC3C,GAAG+E,EAAUpD,KAAOoD,EAAUnD,SAC1B,OAAOmD,EAGX,IAAIC,EAAWhC,OAAOC,OAAO,GAAI8B,GAMjC,OALAC,EAASnE,MAAMoE,SAAQ,SAAAzB,GAChBA,EAAExD,QAAUA,IACXwD,EAAExC,KAAKnB,OAAS2D,EAAExC,KAAKnB,SAAWJ,EAAUgE,QAAUhE,EAAUgD,QAAUhD,EAAUgE,YAGrFuB,EE7EQI,CAAS9B,EAAWtD,SAwCjC,cAAC,EAAD,CAAUsD,UAAWA,EAAWgB,YArCd,WAChB,IAAMe,EAAU7D,EACZf,KAAK6E,IAAI7E,KAAKC,KAAK4C,EAAU3C,MAAQ,EAAG,GACxCF,KAAK8E,MAAwB,IAAlBjC,EAAU/B,OACrB+B,EAAUlC,MACVkC,EAAUjC,UACViC,EAAUhC,WAEdqD,EAAaU,IA6B2Cd,eA1BrC,WACnB,IAAMc,EAAU7D,EA1CH,EACC,EA4CV,EACA8B,EAAUjC,UACV,GAEJsD,EAAaU,UCpDrBG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.133fd9a3.chunk.js","sourcesContent":["export enum CellState {\r\n    Unknown, \r\n    Clear,\r\n    Danger,\r\n    Exploded,\r\n    Flagged,\r\n}","import \"./cell.css\";\r\nimport { CellState } from '../../types/CellStatus';\r\n\r\ntype Props = {\r\n  index: number,\r\n  onClick: (index:number) => void,\r\n  onRightClick: (index:number) => void,\r\n  status: CellState,\r\n  neighboringMines?: number,\r\n}\r\n\r\nexport const Cell: React.FC<Props> = props => {\r\n  return (\r\n    <div data-testid=\"cell\" \r\n        className={`Cell  ${CellState[props.status]}${props.neighboringMines || ''}`}\r\n        onClick={() => props.onClick(props.index)}\r\n        onContextMenu={(e) => {props.onRightClick(props.index); e.preventDefault();}}>\r\n          <p>{props.neighboringMines}</p>\r\n    </div>);\r\n}","import \"./board.css\";\r\nimport { CellData } from \"../../types/CellData\";\r\nimport { Cell } from \"../Cell\";\r\n\r\ntype Props = {\r\n  size:number,\r\n  cells:CellData[], \r\n  onClick:(index:number) => void,\r\n  onRightClick:(index:number) => void,\r\n}\r\n\r\nexport const Board = (props:Props) => {\r\n\r\n  const gridStyle = {\r\n    gridTemplateColumns: 'auto '.repeat(Math.sqrt(props.size))\r\n  }\r\n\r\n  return (\r\n  <div className=\"Board\" style={gridStyle} data-testid=\"board\">\r\n    {\r\n      props.cells.map(\r\n        cell => <Cell \r\n          key={cell.index} \r\n          index={cell.index} \r\n          onClick={props.onClick} \r\n          onRightClick={props.onRightClick}\r\n          status={cell.data.status}\r\n          neighboringMines={cell.data.neighboringMines}\r\n        >\r\n        </Cell>)\r\n    }\r\n  </div>\r\n)}","type Props = {\r\n    isWin: boolean,\r\n    isGameover: boolean,\r\n    score: number,\r\n    highScore: number,\r\n    winStreak: number,\r\n    mines: number,\r\n}\r\n\r\nexport function Header(props: Props){\r\n    return (\r\n    <header className=\"App-header\" data-testid=\"header\">\r\n        {props.isWin && !props.isGameover ? \"You won! - \" : \"\"}\r\n        {props.isGameover ? \"Game over - \" : \"\"}\r\n        Score: {props.score}\r\n        <br/>\r\n        High score: {props.highScore}\r\n        <br/>\r\n        Win streak: {props.winStreak}\r\n        <br/>\r\n        Mines on this game: {props.mines}\r\n  </header>)\r\n}","import { CellData } from \"../types/CellData\";\r\nimport { CellState } from \"../types/CellStatus\";\r\nimport { GameState } from \"../types/GameState\";\r\n\r\nexport const generateGameState = (\r\n    size: number, \r\n    numMines: number, \r\n    score?: number,\r\n    highScore?: number,\r\n    winStreak?: number,\r\n) => {\r\n    const newGame: GameState = {\r\n        size: size,\r\n        cells: generateMines(size, numMines),\r\n        mines: numMines,\r\n        score: score || 0,\r\n        highScore: highScore || 0,\r\n        win: false,\r\n        winStreak: winStreak || 0,\r\n        gameover: false,\r\n    }\r\n    return newGame;\r\n}\r\n\r\nexport const generateMines = (size: number, mineCount: number) => {\r\n    if (mineCount > size){\r\n        throw RangeError(\"mineCount should not be larger than size\")\r\n    }\r\n    const xSize = Math.sqrt(size);\r\n    const cells: CellData[] = Array.from({length: size}, (_, i) => ({\r\n        index: i,\r\n        x: i % xSize,\r\n        y: Math.floor(i/xSize),\r\n        data: {\r\n            mine: false,\r\n            status: CellState.Unknown\r\n        }\r\n    }));\r\n    let currentCount = 0;\r\n    \r\n    while(currentCount < mineCount){\r\n        for(let i=0; i < size; i++)\r\n        {\r\n            if (currentCount >= mineCount){\r\n                break;\r\n            }\r\n            if(!cells[i].data.mine){\r\n                const isMine = Math.random() < 0.2\r\n                cells[i].data.mine = isMine;\r\n                if (isMine) currentCount++;\r\n            }\r\n        }\r\n    }\r\n    return cells;\r\n}\r\n\r\nexport const revealCell = (prevState: GameState, index: number) => {\r\n    if(prevState.win || prevState.gameover){\r\n        return prevState;\r\n    }\r\n\r\n    let newState = Object.assign({}, prevState);\r\n    newState.cells.forEach(c => {\r\n        if(c.index === index){\r\n            if (c.data.mine){\r\n                c.data.status = CellState.Exploded\r\n                newState.gameover = true;\r\n            }else{\r\n                c = updateCellState(c, prevState.cells, index);\r\n                newState.score += 100;\r\n                if(c.data.status === CellState.Clear){\r\n                    newState.cells = revealClearCells(prevState.cells, index);\r\n                }\r\n            }\r\n        }\r\n    })\r\n    if (isWinCondition(newState)){\r\n        newState.win = true;\r\n        newState.winStreak++;\r\n        if (newState.score > newState.highScore){\r\n            newState.highScore = newState.score;\r\n        }\r\n    }\r\n    return newState;\r\n}\r\n\r\nconst updateCellState = (cellData: CellData, cells: CellData[], index: number) => {\r\n    const newData = Object.assign({}, cellData);\r\n    const mines = countNeighboringMines(cells, index);\r\n    newData.data.status = mines > 0 ? CellState.Danger : CellState.Clear;\r\n    newData.data.neighboringMines = mines;\r\n    return newData;\r\n}\r\n\r\nexport const isWinCondition = (gameState: GameState) => {\r\n    return !gameState.gameover && (\r\n        gameState.cells.filter(c => c.data.status === CellState.Unknown).length\r\n        + gameState.cells.filter(c => c.data.status === CellState.Flagged).length\r\n        === gameState.mines);\r\n}\r\n\r\nexport const flagCell = (prevState: GameState, index: number) => {\r\n    if(prevState.win || prevState.gameover){\r\n        return prevState;\r\n    }\r\n\r\n    let newState = Object.assign({}, prevState);\r\n    newState.cells.forEach(c => {\r\n        if(c.index === index){\r\n            c.data.status = c.data.status === CellState.Flagged ? CellState.Unknown : CellState.Flagged;\r\n        }\r\n    });\r\n    return newState;\r\n}\r\n\r\nexport const countNeighboringMines = (cells: CellData[], index: number) => {\r\n    const analyzedCell = cells[index];\r\n\r\n    return cells\r\n    .filter(c => isNeighbor(analyzedCell, c))\r\n    .filter(c => c.data.mine).length\r\n}\r\n\r\nconst isNeighbor = (self: CellData, other: CellData) => {\r\n    const x = self.x;\r\n    const y = self.y;\r\n    return ([x-1, x, x+1].includes(other.x) && [y-1, y+1].includes(other.y)) \r\n        || ([x-1, x+1].includes(other.x) && y === other.y);\r\n}\r\n\r\nexport const revealNeighboringClearCells = (cells: CellData[], index: number) => {\r\n    const analyzedCell = cells[index];\r\n\r\n    return cells\r\n    .map(c => {\r\n        if(isNeighbor(analyzedCell, c) && !c.data.mine){\r\n            return updateCellState(c, cells, c.index);\r\n        }\r\n        return c;\r\n    })\r\n}\r\n\r\nexport const revealClearCells = (cells: CellData[], index: number) => {\r\n    let updatedCells = cells;\r\n    let clearedCells = cells.filter(c => c.data.status === CellState.Clear).length;\r\n    let newClearedCells = 0;\r\n    while(clearedCells !== newClearedCells){\r\n        clearedCells = newClearedCells;\r\n        for (let i = 0; i < cells.length; i++){\r\n            const normalizedIndex = i % cells.length;\r\n            if(cells[normalizedIndex].data.status === CellState.Clear){\r\n                updatedCells = revealNeighboringClearCells(cells, normalizedIndex);\r\n            }\r\n        }\r\n        newClearedCells = cells.filter(c => c.data.status === CellState.Clear).length;\r\n    }\r\n    return updatedCells;\r\n}","import \"./controls.css\";\r\nimport { GameState } from \"../../types/GameState\"\r\n\r\ntype Props = {\r\n    gameState: GameState,\r\n    onClickNext: () => void,\r\n    onClickRestart: () => void,\r\n}\r\n\r\nexport const Controls: React.FC<Props> = (props) => {\r\n    return (\r\n    <div>\r\n        {props.gameState.win && \"Congratulations!\"}\r\n        {props.gameState.gameover && \"Better luck next time...\"}\r\n        <div className=\"Button-container\">\r\n            {props.gameState.win && <button className=\"Button next\" onClick={props.onClickNext}>Next game</button>}\r\n        </div>\r\n        <div className=\"Button-container\">\r\n            {props.gameState.gameover && <button className=\"Button restart\" onClick={props.onClickRestart}>Restart</button>}\r\n        </div>\r\n    </div>)\r\n}","import \"./Game.css\";\r\nimport { Board } from \"./components/Board\";\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport { Header } from \"./components/Header\";\r\nimport { GameState } from \"./types/GameState\";\r\nimport { flagCell, generateGameState, revealCell } from \"./state/GameStateManagement\";\r\nimport { Controls } from \"./components/Controls\";\r\n\r\nconst INITIAL_SIZE = 9;\r\nconst INITIAL_MINES = 1;\r\n\r\nconst initalGameState: GameState = {\r\n    size: 0,\r\n    cells: [],\r\n    mines: 0,\r\n    score: 0,\r\n    highScore: 0,\r\n    win: false,\r\n    winStreak: 0,\r\n    gameover: false,\r\n}\r\n\r\nfunction Game() {\r\n\r\n    const [gameState, setGameState] = useState<GameState>(initalGameState);\r\n\r\n    const initializeGame = useCallback(() => {\r\n        setGameState(generateGameState(INITIAL_SIZE, INITIAL_MINES));\r\n    },[]);\r\n\r\n    const onClickUpdateState = (index: number) => {\r\n        setGameState(revealCell(gameState, index));\r\n    }\r\n\r\n    const onRightClickUpdateState = (index: number) => {\r\n      setGameState(flagCell(gameState, index));\r\n  }\r\n\r\n    const onClickNext = () => {\r\n        const newGame = generateGameState(\r\n            Math.pow(Math.sqrt(gameState.size) + 1, 2), \r\n            Math.round(gameState.mines * 1.5),\r\n            gameState.score,\r\n            gameState.highScore,\r\n            gameState.winStreak,\r\n        )\r\n        setGameState(newGame);\r\n    }\r\n\r\n    const onClickRestart = () => {\r\n        const newGame = generateGameState(\r\n            INITIAL_SIZE,\r\n            INITIAL_MINES,\r\n            0,\r\n            gameState.highScore,\r\n            0,\r\n        )\r\n        setGameState(newGame);\r\n    }\r\n\r\n    useEffect(() => initializeGame(), [initializeGame]);\r\n\r\n    return (\r\n    <div className=\"App\">\r\n      <Header\r\n        isWin={gameState.win}\r\n        isGameover={gameState.gameover}\r\n        score={gameState.score}\r\n        winStreak={gameState.winStreak}\r\n        highScore={gameState.highScore}\r\n        mines={gameState.mines}\r\n      />\r\n      <div className=\"Board-container\">\r\n        <Board size={gameState.size} cells={gameState.cells} onClick={onClickUpdateState} onRightClick={onRightClickUpdateState}></Board>\r\n      </div>\r\n      <Controls gameState={gameState} onClickNext={onClickNext} onClickRestart={onClickRestart}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Game from './Game';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Game />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}