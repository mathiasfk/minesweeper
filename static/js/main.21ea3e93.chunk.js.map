{"version":3,"sources":["components/Cell/index.tsx","components/Board/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Cell","props","useState","classes","setClasses","useEffect","status","className","onClick","index","Board","cells","map","cell","data","BOARD_SIZE","MAX_MINES","Math","sqrt","isLeftColumn","isRightColumn","isTopRow","isBottomRow","rowSize","App","score","setScore","gameover","setGameover","setCells","mineCount","i","isMine","random","push","mine","generateMines","checkMine","validIndex","some","hitMine","updateCells","updateStatus","neighborMines","selectStatus","count","countNeighbors","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.21ea3e93.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\n\nexport const Cell = (props:any) => {\n\n  const [classes, setClasses] = useState<string>(\"\");\n\n  useEffect(() => setClasses(props.status), [props.status]);\n\n  const onClick = (index:number) => {\n      props.onClick(index);\n  };\n  return <div className={\"Cell \" + classes} onClick={() => onClick(props.index)}></div>;\n}","import { Cell } from \"../Cell\";\n\nexport const Board = (props:any) => {\n\n  return (\n  <div className=\"Board\">\n    {\n      props.cells.map(\n        (cell:any) => <Cell \n          key={cell.index} \n          index={cell.index} \n          onClick={props.onClick} \n          status={cell.data.status}\n        ></Cell>)\n    }\n  </div>\n)}","import './App.css';\nimport { Board } from './components/Board';\nimport { useEffect, useState } from 'react';\n\nconst BOARD_SIZE = 25;\nconst MAX_MINES = Math.sqrt(BOARD_SIZE);\n\nconst isLeftColumn = (index:number) => {\n  const rowSize = Math.sqrt(BOARD_SIZE);\n  return (index % rowSize) === 0;\n}\n\nconst isRightColumn = (index:number) => {\n  const rowSize = Math.sqrt(BOARD_SIZE);\n  return ((index + 1) % rowSize) === 0;\n}\n\nconst isTopRow = (index:number) => {\n  const rowSize = Math.sqrt(BOARD_SIZE);\n  return (index < rowSize);\n}\n\nconst isBottomRow = (index:number) => {\n  const rowSize = Math.sqrt(BOARD_SIZE);\n  return (index >= BOARD_SIZE - rowSize);\n}\n\nconst generateMines = () => {\n  let cells = [];\n  let mineCount = 0;\n\n  for(let i=0; i < BOARD_SIZE; i++)\n  {\n    const isMine = Math.random() < 0.2 && (mineCount++ < MAX_MINES);\n    cells.push({\n      index: i,\n      data: {\n        mine: isMine,\n        status: 'unknown'\n      }\n    });\n  }\n  return cells;\n}\n\n\nfunction App() {\n  const [score, setScore] = useState(0);\n  const [gameover, setGameover] = useState(false);\n  const [cells, setCells] = useState<any>([]);\n\n  useEffect(() => setCells(generateMines()),[]);\n\n  const checkMine = (index:number) => {\n    const validIndex = (index + BOARD_SIZE) % BOARD_SIZE;\n    return cells.some((cell:any) => {\n      return (cell.index === validIndex && cell.data.mine)\n    });\n  }\n\n  const countNeighbors = (index:number) => {\n    const rowSize = Math.sqrt(BOARD_SIZE);\n    let count = 0;\n\n    if(!isLeftColumn(index) && checkMine(index - 1)) count += 1;\n    if(!isRightColumn(index) && checkMine(index + 1)) count += 1;\n\n    if(!isTopRow(index) && checkMine(index - rowSize)) count += 1;\n    if(!isBottomRow(index) && checkMine(index + rowSize)) count += 1;\n\n    if(!isTopRow(index) && !isLeftColumn(index) && checkMine(index - rowSize - 1)) count += 1;\n    if(!isTopRow(index) && !isRightColumn(index) && checkMine(index - rowSize + 1)) count += 1;\n    if(!isBottomRow(index) && !isRightColumn(index) && checkMine(index + rowSize + 1)) count += 1;\n    if(!isBottomRow(index) && !isLeftColumn(index) && checkMine(index + rowSize - 1)) count += 1;\n\n    return count;\n  }\n\n  const updateStatus = (index:number, status:string) => {\n    const updateCells = cells.map((cell:any) => {\n      if(cell.index === index){\n        return {\n          index: cell.index, \n          data: {\n            mine: cell.mine,\n            status: status\n          }\n        }\n      }else{\n        return cell;\n      }\n    })\n    setCells(updateCells);\n  }\n\n  const selectStatus = (hitMine: boolean, neighborMines: number) => {\n    let status = '';\n    if (hitMine){\n      status = 'exploded';\n    } else if(neighborMines === 0){\n      status = 'clear';\n    } else if(neighborMines === 1){\n      status = 'warning';\n    } else if(neighborMines > 1){\n      status = 'danger';\n    }\n    return status;\n  }\n\n  const onClick = (index:number) => {\n    if (gameover) return;\n\n    const hitMine = checkMine(index);\n    setScore(hitMine ? score : score + 100);\n\n    const neighborMines = countNeighbors(index);\n    updateStatus(index, selectStatus(hitMine, neighborMines));\n\n    if(hitMine) setGameover(true);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {gameover ? \"Game over - \" : \" \"} Score: {score}\n      </header>\n      <div className=\"Board-container\">\n        <Board cells={cells} onClick={onClick}></Board>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}