{"version":3,"sources":["components/Cell/index.tsx","components/Board/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Cell","props","useState","classes","setClasses","useEffect","status","className","onClick","index","Board","gridStyle","gridTemplateColumns","repeat","Math","sqrt","size","style","cells","map","cell","data","BOARD_SIZE","MAX_MINES","isLeftColumn","isRightColumn","isTopRow","isBottomRow","rowSize","App","score","setScore","highScore","setHighScore","gameover","setGameover","win","setWin","setCells","winStreak","setWinStreak","generateMines","mineCount","i","isMine","random","console","log","push","mine","checkMine","validIndex","some","updateScore","onWin","onLose","hitMine","filter","getStatus","neighborMines","count","countNeighbors","unknownCount","reduce","sum","cur","updateCells","updateStatus","selectStatus","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wMAEaA,EAAO,SAACC,GAEnB,MAA8BC,mBAAiB,IAA/C,mBAAOC,EAAP,KAAgBC,EAAhB,KAEAC,qBAAU,kBAAMD,EAAWH,EAAMK,UAAS,CAACL,EAAMK,SAKjD,OAAO,qBAAKC,UAAW,QAAUJ,EAASK,QAAS,kBAHlCC,EAGgDR,EAAMQ,WAFnER,EAAMO,QAAQC,GADF,IAACA,MCNNC,EAAQ,SAACT,GAEpB,IAAMU,EAAY,CAChBC,oBAAqB,QAAQC,OAAOC,KAAKC,KAAKd,EAAMe,QAGtD,OACA,qBAAKT,UAAU,QAAQU,MAAON,EAA9B,SAEIV,EAAMiB,MAAMC,KACV,SAACC,GAAD,OAAc,cAAC,EAAD,CAEZX,MAAOW,EAAKX,MACZD,QAASP,EAAMO,QACfF,OAAQc,EAAKC,KAAKf,QAHbc,EAAKX,aCTda,EAAa,GACbC,EAAYT,KAAKC,KAAKO,GAAc,EAIpCE,EAAe,SAACf,GAEpB,OAAQA,EADQK,KAAKC,KAAKO,KACG,GAGzBG,EAAgB,SAAChB,GAErB,OAASA,EAAQ,GADDK,KAAKC,KAAKO,KACS,GAG/BI,EAAW,SAACjB,GAEhB,OAAQA,EADQK,KAAKC,KAAKO,IAItBK,EAAc,SAAClB,GACnB,IAAMmB,EAAUd,KAAKC,KAAKO,GAC1B,OAAQb,GAASa,EAAaM,GAgMjBC,MA7Lf,WACE,MAA0B3B,mBAAS,GAAnC,mBAAO4B,EAAP,KAAcC,EAAd,KACA,EAAkC7B,mBAAS,GAA3C,mBAAO8B,EAAP,KAAkBC,EAAlB,KACA,EAAgC/B,oBAAS,GAAzC,mBAAOgC,EAAP,KAAiBC,EAAjB,KACA,EAAsBjC,oBAAS,GAA/B,mBAAOkC,EAAP,KAAYC,EAAZ,KACA,EAA0BnC,mBAAc,IAAxC,mBAAOgB,EAAP,KAAcoB,EAAd,KACA,EAAkCpC,mBAAS,GAA3C,mBAAOqC,EAAP,KAAkBC,EAAlB,KAEMC,EAAgB,WAIpB,IAHA,IAAIvB,EAAQ,GACRwB,EAAY,EAERC,EAAE,EAAGA,EAAIrB,EAAYqB,IAC7B,CACE,IAAIC,GAAS,EACV9B,KAAK+B,SAAW,IAAOH,EAAYnB,IACpCqB,GAAS,EACTF,KAGFI,QAAQC,IAAIL,GACZxB,EAAM8B,KAAK,CACTvC,MAAOkC,EACPtB,KAAM,CACJ4B,KAAML,EACNtC,OAAQ,aAId,OAAOY,GAGTb,qBAAU,kBAAMiC,EAASG,OAAiB,IAE1C,IAAMS,EAAY,SAACzC,GACjB,IAAM0C,GAAc1C,EAAQa,GAAcA,EAC1C,OAAOJ,EAAMkC,MAAK,SAAChC,GACjB,OAAQA,EAAKX,QAAU0C,GAAc/B,EAAKC,KAAK4B,SAkG7CI,EAAc,SAACvB,GACnBG,EAAaH,GAASE,EAAYF,EAAQE,GAC1CD,EAASD,IAGLwB,EAAQ,WACZjB,GAAO,GACPgB,EAAYvB,EApKG,KAqKfU,EAAaD,EAAY,IAGrBgB,EAAS,WACbpB,GAAY,IAkBd,OACE,sBAAK5B,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACG6B,IAAQF,EAAW,cAAgB,GACnCA,EAAW,eAAiB,GAF/B,UAGUJ,EACR,uBAJF,eAKeE,EACb,uBANF,eAOeO,KAEf,qBAAKhC,UAAU,kBAAf,SACE,cAAC,EAAD,CAAOS,KAAMM,EAAYJ,MAAOA,EAAOV,QApE7B,SAACC,GACf,IAAIyB,IAAYE,EAAhB,CAEA,IAAMoB,EAAUN,EAAUzC,GAED,YAzET,SAACA,GACjB,IAAM0C,GAAc1C,EAAQa,GAAcA,EAC1C,OAAOJ,EAAMuC,QAAO,SAACrC,GAAD,OAAcA,EAAKX,QAAU0C,KAAY,GAAG9B,KAAKf,OAuEjEoD,CAAUjD,IAAyB+C,GAErCH,EAAYvB,EA3IO,KA8IrB,IAAM6B,EAzEe,SAAClD,GACtB,IAAMmB,EAAUd,KAAKC,KAAKO,GACtBsC,EAAQ,EAaZ,OAXIpC,EAAaf,IAAUyC,EAAUzC,EAAQ,KAAImD,GAAS,IACtDnC,EAAchB,IAAUyC,EAAUzC,EAAQ,KAAImD,GAAS,IAEvDlC,EAASjB,IAAUyC,EAAUzC,EAAQmB,KAAUgC,GAAS,IACxDjC,EAAYlB,IAAUyC,EAAUzC,EAAQmB,KAAUgC,GAAS,GAE3DlC,EAASjB,IAAWe,EAAaf,KAAUyC,EAAUzC,EAAQmB,EAAU,KAAIgC,GAAS,GACpFlC,EAASjB,IAAWgB,EAAchB,KAAUyC,EAAUzC,EAAQmB,EAAU,KAAIgC,GAAS,GACrFjC,EAAYlB,IAAWgB,EAAchB,KAAUyC,EAAUzC,EAAQmB,EAAU,KAAIgC,GAAS,GACxFjC,EAAYlB,IAAWe,EAAaf,KAAUyC,EAAUzC,EAAQmB,EAAU,KAAIgC,GAAS,GAEpFA,EA0DeC,CAAepD,GAC/BqD,EA1BC5C,EAAMuC,QACX,SAACrC,GAAD,MAAmC,YAArBA,EAAKC,KAAKf,UACxByD,QACA,SAACC,EAAcC,GAAf,OAA4BD,EAAM,IAAG,GAwBjCtB,EAnBCxB,EAAMuC,QACX,SAACrC,GAAD,OAAcA,EAAKC,KAAK4B,QACxBc,QACA,SAACC,EAAcC,GAAf,OAA4BD,EAAM,IAAG,GAkBvClB,QAAQC,IAAIe,GA3DO,SAACrD,EAAcH,GAClC,IAAM4D,EAAchD,EAAMC,KAAI,SAACC,GAC7B,OAAGA,EAAKX,QAAUA,EACT,CACLA,MAAOW,EAAKX,MACZY,KAAM,CACJ4B,KAAM7B,EAAK6B,KACX3C,OAAQA,IAILc,KAGXkB,EAAS4B,GA8CTC,CAAa1D,EA3CM,SAAC+C,EAAkBG,GACtC,IAAIrD,EAAS,GAQb,OAPIkD,EACFlD,EAAS,WACiB,IAAlBqD,EACRrD,EAAS,QACFqD,EAAgB,IACvBrD,EAAM,iBAAaqD,IAEdrD,EAkCa8D,CAAaZ,EAASG,IAEvCG,GAAgBpB,EAAY,GAC7BY,IAGCE,GACDD,UAgDA,qBAAKhD,UAAU,mBAAf,SACG2B,IAAaE,EAAK,wBAAQ7B,UAAU,iBAAiBC,QA9B1C,WAChB8B,EAASG,KACTN,GAAY,GACZF,EAAaH,EAAQE,EAAYF,EAAQE,GACzCD,EAAS,GACTM,GAAO,GACPG,EAAa,IAwBU,qBAA0E,+BAE/F,qBAAKjC,UAAU,mBAAf,SACG6B,IAAQF,EAAW,wBAAQ3B,UAAU,cAAcC,QAxB3C,WACb8B,EAASG,KACTN,GAAY,GACZE,GAAO,IAqBiB,sBAAqE,mCCtMlFgC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.9a1171b1.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\n\nexport const Cell = (props:any) => {\n\n  const [classes, setClasses] = useState<string>(\"\");\n\n  useEffect(() => setClasses(props.status), [props.status]);\n\n  const onClick = (index:number) => {\n      props.onClick(index);\n  };\n  return <div className={\"Cell \" + classes} onClick={() => onClick(props.index)}></div>;\n}","import { Cell } from \"../Cell\";\n\nexport const Board = (props:any) => {\n\n  const gridStyle = {\n    gridTemplateColumns: 'auto '.repeat(Math.sqrt(props.size))\n  }\n\n  return (\n  <div className=\"Board\" style={gridStyle}>\n    {\n      props.cells.map(\n        (cell:any) => <Cell \n          key={cell.index} \n          index={cell.index} \n          onClick={props.onClick} \n          status={cell.data.status}\n        ></Cell>)\n    }\n  </div>\n)}","import './App.css';\nimport { Board } from './components/Board';\nimport { useEffect, useState } from 'react';\n\nconst BOARD_SIZE = 36;\nconst MAX_MINES = Math.sqrt(BOARD_SIZE) - 1;\nconst POINTS_INCREMENT = 100;\nconst POINTS_WIN = 500;\n\nconst isLeftColumn = (index:number) => {\n  const rowSize = Math.sqrt(BOARD_SIZE);\n  return (index % rowSize) === 0;\n}\n\nconst isRightColumn = (index:number) => {\n  const rowSize = Math.sqrt(BOARD_SIZE);\n  return ((index + 1) % rowSize) === 0;\n}\n\nconst isTopRow = (index:number) => {\n  const rowSize = Math.sqrt(BOARD_SIZE);\n  return (index < rowSize);\n}\n\nconst isBottomRow = (index:number) => {\n  const rowSize = Math.sqrt(BOARD_SIZE);\n  return (index >= BOARD_SIZE - rowSize);\n}\n\nfunction App() {\n  const [score, setScore] = useState(0);\n  const [highScore, setHighScore] = useState(0);\n  const [gameover, setGameover] = useState(false);\n  const [win, setWin] = useState(false);\n  const [cells, setCells] = useState<any>([]);\n  const [winStreak, setWinStreak] = useState(0);\n\n  const generateMines = () => {\n    let cells = [];\n    let mineCount = 0;\n    \n    for(let i=0; i < BOARD_SIZE; i++)\n    {\n      let isMine = false;\n      if(Math.random() < 0.2 && mineCount < MAX_MINES){\n        isMine = true;\n        mineCount++;\n      }\n\n      console.log(mineCount);\n      cells.push({\n        index: i,\n        data: {\n          mine: isMine,\n          status: 'unknown'\n        }\n      });\n    }\n    return cells;\n  }\n\n  useEffect(() => setCells(generateMines()),[]);\n\n  const checkMine = (index:number) => {\n    const validIndex = (index + BOARD_SIZE) % BOARD_SIZE;\n    return cells.some((cell:any) => {\n      return (cell.index === validIndex && cell.data.mine)\n    });\n  }\n\n  const getStatus = (index:number) => {\n    const validIndex = (index + BOARD_SIZE) % BOARD_SIZE;\n    return cells.filter((cell:any) => cell.index === validIndex)[0].data.status;\n  }\n\n  const countNeighbors = (index:number) => {\n    const rowSize = Math.sqrt(BOARD_SIZE);\n    let count = 0;\n\n    if(!isLeftColumn(index) && checkMine(index - 1)) count += 1;\n    if(!isRightColumn(index) && checkMine(index + 1)) count += 1;\n\n    if(!isTopRow(index) && checkMine(index - rowSize)) count += 1;\n    if(!isBottomRow(index) && checkMine(index + rowSize)) count += 1;\n\n    if(!isTopRow(index) && !isLeftColumn(index) && checkMine(index - rowSize - 1)) count += 1;\n    if(!isTopRow(index) && !isRightColumn(index) && checkMine(index - rowSize + 1)) count += 1;\n    if(!isBottomRow(index) && !isRightColumn(index) && checkMine(index + rowSize + 1)) count += 1;\n    if(!isBottomRow(index) && !isLeftColumn(index) && checkMine(index + rowSize - 1)) count += 1;\n\n    return count;\n  }\n\n  const updateStatus = (index:number, status:string) => {\n    const updateCells = cells.map((cell:any) => {\n      if(cell.index === index){\n        return {\n          index: cell.index, \n          data: {\n            mine: cell.mine,\n            status: status\n          }\n        }\n      }else{\n        return cell;\n      }\n    })\n    setCells(updateCells);\n  }\n\n  const selectStatus = (hitMine: boolean, neighborMines: number) => {\n    let status = '';\n    if (hitMine){\n      status = 'exploded';\n    } else if(neighborMines === 0){\n      status = 'clear';\n    }else if(neighborMines > 0){\n      status = `danger-${neighborMines}`;\n    }\n    return status;\n  }\n\n  const countUnknown = () => {\n    return cells.filter(\n      (cell:any) => cell.data.status === 'unknown'\n    ).reduce(\n      (sum: number , cur: any) => sum + 1, 0\n    )\n  }\n\n  const countMines = () => {\n    return cells.filter(\n      (cell:any) => cell.data.mine\n    ).reduce(\n      (sum: number , cur: any) => sum + 1, 0\n    )\n  }\n\n  const onClick = (index:number) => {\n    if (gameover || win) return;\n\n    const hitMine = checkMine(index);\n    \n    if (getStatus(index) === 'unknown' && !hitMine)\n    {\n      updateScore(score + POINTS_INCREMENT);\n    }\n\n    const neighborMines = countNeighbors(index);\n    const unknownCount = countUnknown();\n    const mineCount = countMines();\n\n    console.log(unknownCount);\n    updateStatus(index, selectStatus(hitMine, neighborMines));\n\n    if(unknownCount <= mineCount + 1){\n      onWin();\n    }\n\n    if(hitMine){\n      onLose();\n    }\n  };\n\n  const updateScore = (score: number) => {\n    setHighScore(score >= highScore ? score : highScore);\n    setScore(score);\n  }\n\n  const onWin = () => {\n    setWin(true);\n    updateScore(score + POINTS_WIN);\n    setWinStreak(winStreak + 1);\n  }\n\n  const onLose = () => {\n    setGameover(true);\n  }\n\n  const onRestart = () => {\n    setCells(generateMines());\n    setGameover(false);\n    setHighScore(score > highScore ? score : highScore);\n    setScore(0);\n    setWin(false);\n    setWinStreak(0);\n  }\n\n  const onNext = () => {\n    setCells(generateMines());\n    setGameover(false);\n    setWin(false);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {win && !gameover ? \"You won! - \" : \"\"}\n        {gameover ? \"Game over - \" : \"\"}\n        Score: {score}\n        <br/>\n        High score: {highScore}\n        <br/>\n        Win streak: {winStreak}\n      </header>\n      <div className=\"Board-container\">\n        <Board size={BOARD_SIZE} cells={cells} onClick={onClick}></Board>\n      </div>\n      <div className=\"Button-container\">\n        {gameover && !win ?<button className=\"Button restart\" onClick={onRestart}>Restart</button> : <></>}\n      </div>\n      <div className=\"Button-container\">\n        {win && !gameover ? <button className=\"Button next\" onClick={onNext}>Continue</button> : <></>}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}